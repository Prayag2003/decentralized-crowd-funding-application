{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/Converter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary Converter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        // interface used to make API calls\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        // );\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    function getVersion() internal view returns (uint256) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        );\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function conversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUSD = (ethAmount * ethPrice) / 1e18;\r\n        return ethAmountInUSD;\r\n    }\r\n}\r\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./Converter.sol\";\r\n\r\n\r\ncontract FundMe {\r\n    uint256 minimumDonationInUSD = 20 * (10 ** 18);\r\n    address[] public funders;\r\n    mapping(address => uint256) addressToDonationAmt;\r\n    using Converter for uint256;\r\n\r\n    address public owner;\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.conversionRate(priceFeed) >= minimumDonationInUSD * 1e18,\r\n            \"Lesser than minimum donation\"\r\n        );\r\n        funders.push(msg.sender);\r\n        addressToDonationAmt[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public OwnerOnly {\r\n        for (uint256 i = 0; i < funders.length; i++) {\r\n            address temp = funders[i];\r\n            addressToDonationAmt[temp] = 0;\r\n        }\r\n        // reseting array\r\n        funders = new address[](0);\r\n\r\n        // using call to withdraw\r\n        (bool successful, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(successful, \"Call failed\");\r\n    }\r\n\r\n    modifier OwnerOnly() {\r\n        require(msg.sender == owner, \"Only owner can call this\");\r\n        _;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}